name: CI-CD

on: push

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip' 

      - name: Install Packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Configure DVC Remote
        run: |
          dvc remote add -d origin s3://food-time-prediction
          dvc remote modify origin access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          dvc remote modify origin secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          dvc pull

      - name: Test Model Registry
        env:
          DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          pytest tests/test_model_registry.py

      - name: Test Model Performance
        env:
          DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          pytest tests/test_model_perf.py

      - name: Promote Model
        if: success()
        env:
          DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          python scripts/promote_model_to_prod.py

      # Configure AWS credentials again for Docker tasks
      - name: Configure AWS credentials for Docker
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.ECR_REPOSITORY_URI }}
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # Zip the required files
      - name: Zip files for deployment
        if: success()
        run: |
            zip -r deployment.zip appspec.yml deploy/scripts/install_dependencies.sh deploy/scripts/start_docker.sh

      # Upload the ZIP file to S3
      - name: Upload ZIP to S3
        if: success()
        run: |
            aws s3 cp deployment.zip s3://deliverytimepredictiondeployments/deployment.zip

      # Deploy to AWS CodeDeploy
      - name: Deploy to AWS CodeDeploy
        if: success()
        run: |
            aws deploy create-deployment \
            --application-name Food-D-TIME-PRED \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name Food-D-TIME-PRED-GROUP \
            --s3-location bucket=deliverytimepredictiondeployments,key=deployment.zip,bundleType=zip \
            --file-exists-behavior OVERWRITE \
            --region ap-south-1
